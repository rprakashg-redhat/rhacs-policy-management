name: cd
on:
  push:
    branches:
      - main
    paths:
      - "deploy/apps/**"
  workflow_dispatch:
    inputs:
      generate-netpol:
        type: boolean
        description: 'Generate network policies'
        required: false
        default: false
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  deploy:
    name: deploy apps
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: verify tools installed
      run: |
        kubectl version --client=true
        aws --version
        kustomize version
    - name: get cluster credentials
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}
        kubectl get nodes
    - name: create namespace
      run: |
        kubectl create namespace "sessionize" --dry-run=client -o yaml | kubectl apply -f -
    - name: create image pull secret
      run: |
        kubectl create secret --dry-run=client -n "sessionize" docker-registry ghcr-creds \
          --docker-server=https://ghcr.io --docker-username=rprakashg-redhat --docker-password=${{ secrets.IMAGE_PULL_TOKEN }} \
          --docker-email=rgopinat@redhat.com -o yaml | kubectl apply -f -
    - name: create database creds 
      run: |
        kubectl create secret --dry-run=client -n "sessionize" generic db-connection-properties \
          --from-literal=DBHOST="${{ secrets.DB_HOST}}" \
          --from-literal=DBNAME="${{ secrets.DBNAME }}" \
          --from-literal=DBUSER="${{ secrets.DBUSER }}" \
          --from-literal=DBPASSWORD="${{ secrets.DBPASSWORD }}" -o yaml | kubectl apply -f -
    - name: create mongodb atlas
      run: |
        kubectl create secret --dry-run=client -n "sessionize" generic mongodb-connection-properties \
          --from-literal=DATABASE_URL="mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_USER_PASSWORD }}@${{ secrets.MONGODB_HOST }}/${{ secrets.MONGODB_DB_NAME }}" \
          -o yaml | kubectl apply -f -

    - name: deploy apps
      run: |
        echo "deploying applications to kubernetes"
        kustomize build deploy/apps/overlays/dev | kubectl apply -n "sessionize" -f - 

    - name: save manifests to tmp dir
      run: |
        mkdir ${{ runner.temp }}/k8s
        kustomize build deploy/apps/overlays/dev --output ${{ runner.temp }}/k8s 
        ls -l ${{ runner.temp }}/k8s

    - name: generate network policies
      if: ${{ inputs.generate-netpol }}
      uses: ./.github/actions/roxctl
      with:
        central-endpoint: ${{ secrets.ROX_CENTRAL_ENDPOINT}}
        api-token: ${{ secrets.ROX_API_TOKEN }}
        args: "netpol generate ${{ runner.temp }}/k8s --output-file ${{ runner.temp }}/k8s/netpols.yaml"

    - name: save generated policies as artifact
      if: ${{ inputs.generate-netpol }}
      uses: actions/upload-artifact@v3
      with:
        name: network-policies
        path: ${{ runner.temp }}/k8s/netpols.yaml

    - name: generate a connectivity map diagram
      uses: ./.github/actions/roxctl
      with:
        central-endpoint: ${{ secrets.ROX_CENTRAL_ENDPOINT}}
        api-token: ${{ secrets.ROX_API_TOKEN }}
        args: "netpol connectivity map ${{ runner.temp }}/k8s --output-format=dot --save-to-file=true --output-file=${{ runner.temp }}/k8s/connlist.dot"
    
    - name: upload dot file artifact
      uses: actions/upload-artifact@v3
      with:
        name: connectivity-map-dot
        path: ${{ runner.temp }}/k8s/connlist.dot

    - name: convert dot file to png using graphviz
      uses: ./.github/actions/graphviz
      with:
        file: ${{ runner.temp }}/k8s/connlist.dot
        png: ${{ runner.temp }}/k8s/connlist.png

    - name: upload dot file artifact
      uses: actions/upload-artifact@v3
      with:
        name: connectivity-map-png
        path: ${{ runner.temp }}/k8s/connlist.png

    - name: deploy generated network policies to cluster
      if: ${{ inputs.generate-netpol }}
      run: |
        echo "deploying generated network policies to clsuter"
        cat ${{ runner.temp }}/k8s/netpols.yaml | kubectl apply -n "sessionize" -f -

    